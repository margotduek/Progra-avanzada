/*
  Margot Duek Kalach 
  Advanced programming 
  A01021226
  Second partial
*/

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define NUM_THREADS 4

// Function declarations
void * start_slot(void * arg);

int main(){
  int status;
  int f_th = 1;
  int s_th = 2;
  int th_th = 3;
  
  pthread_t first_slot, second_slot, third_slot;
  status = pthread_create(&first_slot, NULL, &start_slot, &f_th);
  if (status)
    {
      fprintf(stderr, "ERROR: pthread_create %d\n", status);
      exit(EXIT_FAILURE);
    }
  printf("Created new thread \n");
  status = pthread_create(&second_slot, NULL, &start_slot, &s_th);
  if (status)
    {
      fprintf(stderr, "ERROR: pthread_create %d\n", status);
      exit(EXIT_FAILURE);
    }
  printf("Created new thread \n");
  status = pthread_create(&third_slot, NULL, &start_slot, &th_th);
  if (status)
    {
      fprintf(stderr, "ERROR: pthread_create %d\n", status);
      exit(EXIT_FAILURE);
    }
  printf("Created new thread \n");


  // Wait for all other threads to finish
  pthread_exit(NULL);
  
  
  return 0;
}



void * start_slot(void * arg){
  int num = *((int *)arg);
  printf("num  %d\n", num);
  
  srand(time(NULL));
  char chars[] = {'M', 'A', 'R', 'G', 'O', 'T'};
  int stp = rand() + num; 
  int choosed = 0;
  for( int i = 0; i < stp; i + num){
    if(choosed > 5){
      choosed = 0;
    }
    choosed ++;
  }

  printf("num is %d\n", choosed);
  return NULL;
}
